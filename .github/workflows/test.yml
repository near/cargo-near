name: CI

on:
  push:
    branches: [ main ]
  pull_request:

jobs:
  test-prep:
    runs-on: ubuntu-latest
    outputs:
      test-batches: ${{ steps.get-tests.outputs.test-batches }}

    steps:
      - name: Checkout Source
        uses: actions/checkout@v2

      - uses: Swatinem/rust-cache@v2
        with:
          shared-key: cargo-near-cache-ubuntu

      - name: Get all tests
        id: get-tests
        run: |
          cargo test --package cargo-near-integration-tests -- --list --format terse \
            | grep ': test$' | sed 's/\(.*\): .*$/\1/' \
            > tests
          total=$((`wc -l < tests`));share=$((total / 5))
          TEST_BATCHES="$(
            c=0; i=0; until [ $c -gt $total ]; do
              tests=$(tail -n +$c tests | head -n +$share | sed 's/$/ /g' | tr -d '\n')
              : $((i+=1,c+=share))
              echo "{\"batch\":$i,\"units\":\"$tests\"},"
            done
          )"
          echo "::set-output name=test-batches::[$TEST_BATCHES]"

  integration-test:
    name: "tests (batch #${{ matrix.test.batch }}) (${{ matrix.platform }}, ${{ matrix.toolchain }}"
    runs-on: ${{ matrix.platform }}
    needs: test-prep
    strategy:
      matrix:
        platform: [ubuntu-latest, macos-latest]
        toolchain: [stable, 1.56.0]
        test: ${{ fromJson(needs.test-prep.outputs.test-batches) }}

    steps:
      - name: Checkout Sources
        uses: actions/checkout@v2

      - name: "Install ${{ matrix.toolchain }} toolchain"
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ matrix.toolchain }}

      - uses: Swatinem/rust-cache@v2
        if: ${{ matrix.platform }} == "ubuntu-latest"
        with:
          shared-key: cargo-near-cache-ubuntu

      - uses: Swatinem/rust-cache@v2
        if: ${{ matrix.platform }} == "macos-latest"
        with:
          shared-key: cargo-near-cache-macos

      - name: Run tests
        run: cargo test --verbose --package cargo-near-integration-tests -- ${{ matrix.test.units }}

  tests:
    runs-on: ${{ matrix.platform }}
    strategy:
      matrix:
        platform: [ubuntu-latest, macos-latest]
        toolchain: [stable, 1.56.0]

    steps:
      - name: Checkout Sources
        uses: actions/checkout@v2

      - name: "Install ${{ matrix.toolchain }} toolchain"
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ matrix.toolchain }}

      - uses: Swatinem/rust-cache@v2
        if: ${{ matrix.platform }} == "ubuntu-latest"
        with:
          shared-key: cargo-near-cache-ubuntu

      - uses: Swatinem/rust-cache@v2
        if: ${{ matrix.platform }} == "macos-latest"
        with:
          shared-key: cargo-near-cache-macos

      - name: Run tests
        run: cargo test --verbose --workspace --exclude cargo-near-integration-tests

  fmt:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Sources
        uses: actions/checkout@v2

      - name: Check Formatting
        run: cargo fmt -- --check

  clippy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Sources
        uses: actions/checkout@v2

      - uses: Swatinem/rust-cache@v2

      - name: Check Clippy
        run: cargo clippy --tests -- -Dclippy::all

  audit:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Sources
        uses: actions/checkout@v2

      - name: Install Audit Tool
        run: cargo install cargo-audit

      - name: Run Audit Tool
        run: cargo audit --ignore RUSTSEC-2020-0071
