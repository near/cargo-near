name: CI

on:
  push:
    branches: [main]
  pull_request:

jobs:
  msrv-check:
    runs-on: ${{ matrix.platform }}
    strategy:
      fail-fast: false
      matrix:
        platform: [ubuntu-latest, macos-latest]

    steps:
      - name: Checkout Sources
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Get MSRV
        run: |
          RUST_MSRV="$(cat cargo-near/Cargo.toml | sed -n 's/rust-version *= *"\(.*\)"/\1/p')"
          echo "RUST_MSRV=$RUST_MSRV" >> $GITHUB_ENV

      - name: "Install ${{ env.RUST_MSRV }} toolchain (MSRV)"
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ env.RUST_MSRV }}
          default: true

      - name: Install packages (Linux)
        if: runner.os == 'Linux'
        run: sudo apt-get update && sudo apt-get install --assume-yes libudev-dev

      - name: Cargo check
        env:
          # info: (overridden by '/home/runner/work/cargo-near/cargo-near/rust-toolchain.toml')
          RUSTUP_TOOLCHAIN: ${{ env.RUST_MSRV }}
        run: | 
          rustc -vV
          cargo check -p cargo-near
          # default features
          cargo check -p cargo-near-build
          cargo check -p cargo-near-build --features build_internal
          cargo check -p cargo-near-build --features docker
          cargo check -p cargo-near-build --all-features

  tests:
    runs-on: ${{ matrix.platform }}
    strategy:
      fail-fast: false
      matrix:
        platform: [ubuntu-latest, macos-latest]

    steps:
      - name: Checkout Sources
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: "Install stable Rust toolchain"
        uses: actions-rs/toolchain@v1
        with:
          # channel is really controlled by ./rust-toolchain.toml
          toolchain: stable
          profile: minimal

      - name: Install `wasm32-unknown-unknown`
        run: rustup target add wasm32-unknown-unknown

      - name: Install packages (Linux)
        if: runner.os == 'Linux'
        run: sudo apt-get update && sudo apt-get install --assume-yes libudev-dev

      - name: Run tests
        run: |
          git config --global user.email "nearprotocol-ci@near.org"
          git config --global user.name "nearprotocol-ci"
          cargo test --workspace

  lint:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Sources
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Check Formatting
        run: cargo fmt -- --check

      - name: Install packages (Linux)
        if: runner.os == 'Linux'
        run: sudo apt-get update && sudo apt-get install --assume-yes libudev-dev

      - name: Check Clippy
        run: cargo clippy --tests -- -Dclippy::all

  # there're sometimes warnings, which signal, that the generated doc
  # won't look as expected, when rendered, and sometimes errors, which will prevent doc from being
  # generated at release time altogether.
  cargo-doc:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    - name: Install packages (Linux)
      if: runner.os == 'Linux'
      run: sudo apt-get update && sudo apt-get install --assume-yes libudev-dev
    - name: run cargo doc
      run: |
        RUSTDOCFLAGS="-D warnings" cargo doc -p cargo-near-build
        cargo test -p cargo-near-build --doc

  typos_check:
    name: Spell Check with typos-cli (rs crate)
    runs-on: ubuntu-latest
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
    - name: Check spelling of the repo
      uses: crate-ci/typos@v1.29.5

  audit:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Sources
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Install Audit Tool
        run: cargo install cargo-audit

      - name: Run Audit Tool
        run: cargo audit
