use colored::Colorize;
use eyre::Context;
use serde::Deserialize;
use serde_json::Value;
use std::{collections::BTreeMap, thread, time::Duration};

use std::str::FromStr;

use crate::types::cargo::metadata::CrateMetadata;

#[derive(Deserialize, Debug)]
/// parsed from `[package.metadata.near.reproducible_build]` in Cargo.toml
pub struct ReproducibleBuild {
    pub image: String,
    pub image_digest: String,
    pub passed_env: Option<Vec<String>>,
    pub container_build_command: Option<Vec<String>>,
    /// a cloneable git remote url,
    /// currently, only ones, starting with `https://`, are supported;
    /// parsed from `package.repository`
    #[serde(skip)]
    pub repository: Option<url::Url>,

    #[serde(rename = "variant", default)]
    pub variants_map: BTreeMap<String, VariantReproducibleBuild>,

    #[serde(flatten)]
    pub unknown_keys: BTreeMap<String, Value>,
}

#[derive(Deserialize, Debug)]
/// parsed from `[package.metadata.near.reproducible_build.variant.name]` in Cargo.toml
pub struct VariantReproducibleBuild {
    pub image: Option<String>,
    pub image_digest: Option<String>,
    pub passed_env: Option<Vec<String>>,
    pub container_build_command: Option<Vec<String>>,

    #[serde(flatten)]
    pub unknown_keys: BTreeMap<String, Value>,
}

impl ReproducibleBuild {
    pub fn parse(cargo_metadata: &CrateMetadata) -> eyre::Result<Self> {
        let Some(build_meta_value) = cargo_metadata
            .root_package
            .metadata
            .get("near")
            .and_then(|value| value.get("reproducible_build"))
        else {
            println!(
                "{}",
                "Metadata section in contract's Cargo.toml, \
                    that is prerequisite for reproducible builds, has not been found..."
                    .yellow()
            );
            thread::sleep(Duration::new(7, 0));
            println!();
            println!(
                "{}{}{}",
                "You can add and commit ".cyan(),
                "`[package.metadata.near.reproducible_build]` ".magenta(),
                "to your contract's Cargo.toml:".cyan()
            );
            println!("{}{}", "- default values for the section can be found at ".cyan(),
                "https://github.com/near/cargo-near/blob/main/cargo-near/src/commands/new/new-project-template/Cargo.template.toml#L14-L29".magenta());
            println!(
                "{}{}",
                "- the same can also be found in Cargo.toml of template project, generated by "
                    .cyan(),
                "`cargo near new`".magenta()
            );

            thread::sleep(Duration::new(12, 0));

            return Err(eyre::eyre!(
                "Missing `[package.metadata.near.reproducible_build]` in Cargo.toml"
            ));
        };
        let mut build_meta: Self = serde_json::from_value(build_meta_value.clone())
            .wrap_err("Malformed `[package.metadata.near.reproducible_build]` in Cargo.toml")?;

        build_meta.repository = cargo_metadata
            .root_package
            .repository
            .as_deref()
            .map(<url::Url as FromStr>::from_str)
            .transpose()?;

        Ok(build_meta)
    }
}
